version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: whatsappcrm_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME:-whatsapp_crm_dev}
      POSTGRES_USER: ${DB_USER:-crm_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?Please set DB_PASSWORD in .env file}
    ports:
      - "5432:5432"
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: whatsappcrm_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped

  backend:
    build: ./whatsappcrm_backend
    container_name: whatsappcrm_backend_app
    volumes:
      - ./whatsappcrm_backend:/app
      - staticfiles_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      - db
      - redis
    restart: unless-stopped

  frontend:
    build: ./whatsapp-crm-frontend
    container_name: whatsappcrm_frontend_app
    depends_on:
      - backend
    restart: unless-stopped

  celery_worker:
    build: ./whatsappcrm_backend
    container_name: whatsappcrm_celery_worker
    command: celery -A whatsappcrm_backend worker -l INFO
    volumes:
      - ./whatsappcrm_backend:/app
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      - redis
      - db
    restart: unless-stopped

  celery_beat:
    build: ./whatsappcrm_backend
    container_name: whatsappcrm_celery_beat
    command: celery -A whatsappcrm_backend beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./whatsappcrm_backend:/app
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      - redis
      - db
    restart: unless-stopped

  nginx_proxy:
    image: nginx:1.25-alpine
    container_name: whatsappcrm_nginx_proxy
    ports:
      - "80:80"    # For HTTP and Let's Encrypt challenge
      - "443:443"  # For HTTPS later
    volumes:
      - ./nginx_proxy/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - staticfiles_volume:/srv/www/static/:ro
      - media_volume:/srv/www/media/:ro
      # Mounts for Let's Encrypt:
      - /var/www/letsencrypt:/var/www/letsencrypt:ro  # For serving ACME challenges (Nginx only needs to read)
      - /etc/letsencrypt:/etc/nginx/ssl:ro           # For SSL certificates and related files (Nginx only needs to read)
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  staticfiles_volume:
  media_volume:
