version: '3.8'

services:
  db:
    image: postgres:15-alpine # Using a specific version of PostgreSQL
    container_name: whatsapp_crm_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME:-whatsapp_crm_dev}
      - POSTGRES_USER=${DB_USER:-crm_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-your_strong_password} # Set this in .env
    ports:
      - "${DB_PORT_LOCAL:-5433}:5432" # Expose DB on host port 5433 (configurable)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-crm_user} -d ${DB_NAME:-whatsapp_crm_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine # Using a specific version of Redis
    container_name: whatsapp_crm_redis
    ports:
      - "${REDIS_PORT_LOCAL:-6379}:6379" # Expose Redis on host port 6379 (configurable)
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend_web: # Renamed from 'backend' to be specific
    build:
      context: ./whatsappcrm_backend # Path to the directory containing the Dockerfile
      dockerfile: Dockerfile
    container_name: whatsapp_crm_backend_web
    command: ["web"] # This will be passed to entrypoint.sh
    volumes:
      - ./whatsappcrm_backend:/app # Mount local code for development (reflects changes without rebuild)
      - static_volume:/app/staticfiles # Persisted static files collected by Django
      - media_volume:/app/whatsapp_media_assets # Persisted user-uploaded media files
    ports:
      - "${DJANGO_PORT_LOCAL:-8000}:8000" # Expose Django on host port 8000 (configurable)
    env_file:
      - ./whatsappcrm_backend/.env # Load environment variables from .env file
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be healthy
      redis:
        condition: service_healthy # Wait for Redis to be healthy
    restart: unless-stopped

  celery_worker:
    build:
      context: ./whatsappcrm_backend
      dockerfile: Dockerfile
    container_name: whatsapp_crm_celery_worker
    command: ["celeryworker"] # Command for entrypoint.sh
    volumes:
      - ./whatsappcrm_backend:/app # Mount local code for development consistency
      # No need for static/media volumes for worker usually, unless tasks directly manipulate them
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend_web: # Optional: ensure web (which runs migrations) starts or is attempted first
        condition: service_started
    restart: unless-stopped
    # Add resource limits if needed
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1.0'
    #       memory: '1G'

  celery_beat:
    build:
      context: ./whatsappcrm_backend
      dockerfile: Dockerfile
    container_name: whatsapp_crm_celery_beat
    command: ["celerybeat"] # Command for entrypoint.sh
    volumes:
      - ./whatsappcrm_backend:/app
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend_web: # Beat needs migrations (django_celery_beat tables)
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

