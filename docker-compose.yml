version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: whatsapp_crm_db_container # Explicit container name
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME:-whatsapp_crm_dev}
      - POSTGRES_USER=${DB_USER:-crm_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-your_strong_password} # Set this in .env
    ports:
      - "${DB_PORT_LOCAL:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-crm_user} -d ${DB_NAME:-whatsapp_crm_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: whatsapp_crm_redis_container # Explicit container name
    ports:
      - "${REDIS_PORT_LOCAL:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  whatsappcrm_backend_app: # Renamed from backend_web
    build:
      context: ./whatsappcrm_backend
      dockerfile: Dockerfile
    container_name: whatsappcrm_backend_app_container
    command: ["web"]
    volumes:
      - ./whatsappcrm_backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/whatsapp_media_assets
    # Exposing port 8000 internally for Nginx to connect to.
    # The external port will be managed by whatsappcrm_nginx_proxy.
    # expose: # Not strictly necessary if Nginx is on the same Docker network
    #   - "8000"
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  whatsappcrm_celery_worker: # Renamed
    build:
      context: ./whatsappcrm_backend
      dockerfile: Dockerfile
    container_name: whatsappcrm_celery_worker_container
    command: ["celeryworker"]
    volumes:
      - ./whatsappcrm_backend:/app
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      whatsappcrm_backend_app: # Depends on the backend app service
        condition: service_started
    restart: unless-stopped

  whatsappcrm_celery_beat: # Renamed
    build:
      context: ./whatsappcrm_backend
      dockerfile: Dockerfile
    container_name: whatsappcrm_celery_beat_container
    command: ["celerybeat"]
    volumes:
      - ./whatsappcrm_backend:/app
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      whatsappcrm_backend_app:
        condition: service_started
    restart: unless-stopped

  whatsappcrm_frontend_app: # Placeholder for your React frontend
    build:
      context: ./whatsapp-crm-frontend # Assuming your frontend code is here
      dockerfile: Dockerfile # You'll need a Dockerfile for your frontend
    container_name: whatsappcrm_frontend_app_container
    # Example: if your frontend dev server runs on 5173
    # expose:
    #   - "5173"
    volumes:
      - ./whatsapp-crm-frontend:/app # Mount local code for development
      - /app/node_modules # Anonymous volume to persist node_modules
    # Add environment variables if needed, e.g., for API URL
    # environment:
    #   - VITE_API_BASE_URL=http://localhost/api # Or whatever your Nginx exposes
    restart: unless-stopped
    # depends_on: # No direct dependency needed if Nginx handles routing
    #   - whatsappcrm_backend_app

  whatsappcrm_nginx_proxy: # Nginx reverse proxy
    image: nginx:1.25-alpine # Using a specific version of Nginx
    container_name: whatsappcrm_nginx_proxy_container
    ports:
      - "${NGINX_PORT_HTTP:-80}:80"      # Expose HTTP on port 80 (configurable)
      # - "${NGINX_PORT_HTTPS:-443}:443" # Uncomment if you set up HTTPS
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Mount your Nginx configuration
      - ./nginx/conf.d:/etc/nginx/conf.d:ro # For site-specific configs
      # - ./nginx/certs:/etc/nginx/certs:ro      # Uncomment for SSL certificates
      # Static and media files can be served by Nginx directly for better performance
      # If Django serves them, Nginx just proxies. If Nginx serves them:
      - static_volume:/srv/static # Nginx needs access to collected static files
      - media_volume:/srv/media   # Nginx needs access to media files
    depends_on:
      whatsappcrm_backend_app:
        condition: service_started
      whatsappcrm_frontend_app:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy=off http://localhost/ || exit 1"] # Basic check if Nginx is responding
      interval: 30s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  static_volume: # For Django's collectstatic output
  media_volume:  # For user-uploaded media files
