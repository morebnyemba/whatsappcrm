version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: whatsapp_crm_db_container
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME:-whatsapp_crm_dev}
      - POSTGRES_USER=${DB_USER:-crm_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-your_strong_password} # Set this in .env
    ports:
      - "${DB_PORT_LOCAL:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-crm_user} -d ${DB_NAME:-whatsapp_crm_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: whatsapp_crm_redis_container
    ports:
      - "${REDIS_PORT_LOCAL:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend: # Using a simpler name, similar to original 'backend_app' idea but shorter
    build:
      context: ./whatsappcrm_backend
      dockerfile: Dockerfile
    container_name: whatsapp_crm_backend_container # New explicit name
    command: ["web"] # This will be passed to entrypoint.sh to start Django
    volumes:
      - ./whatsappcrm_backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/whatsapp_media_assets
    ports:
      - "${DJANGO_PORT_LOCAL:-8000}:8000" # Expose Django directly
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  celery_worker:
    build:
      context: ./whatsappcrm_backend
      dockerfile: Dockerfile
    container_name: whatsapp_crm_celery_worker_container
    command: ["celeryworker"]
    volumes:
      - ./whatsappcrm_backend:/app
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend: # Depends on the backend service
        condition: service_started
    restart: unless-stopped

  celery_beat:
    build:
      context: ./whatsappcrm_backend
      dockerfile: Dockerfile
    container_name: whatsapp_crm_celery_beat_container
    command: ["celerybeat"]
    volumes:
      - ./whatsappcrm_backend:/app
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: