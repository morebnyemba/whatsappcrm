version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: whatsappcrm_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME:-whatsapp_crm_dev}
      POSTGRES_USER: ${DB_USER:-crm_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?Please set DB_PASSWORD in .env file} # Ensure DB_PASSWORD is set
    ports:
      - "5432:5432" # Expose only if you need to connect from host, otherwise keep internal
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: whatsappcrm_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379" # Expose only if needed from host
    restart: unless-stopped

  backend:
    build: ./whatsappcrm_backend
    container_name: whatsappcrm_backend_app
    volumes:
      - ./whatsappcrm_backend:/app
      # Add media volume if you store media files locally
      - media_volume:/app/mediafiles # Example, adjust path based on your MEDIA_ROOT
    ports:
      - "8000:8000" # For local development access; in production, Nginx will handle external port
    env_file:
      - ./whatsappcrm_backend/.env # Make sure this .env file exists and is configured for Docker environment
    depends_on:
      - db
      - redis
    restart: unless-stopped
    # command: > # Example if you need to run migrations first
    #   sh -c "python manage.py migrate &&
    #          gunicorn --bind 0.0.0.0:8000 whatsappcrm_backend.wsgi:application"


  frontend:
    build: ./whatsapp-crm-frontend
    container_name: whatsappcrm_frontend_app
    ports:
      - "3000:80" # Map Nginx port 80 in container to host port 3000 for local access
                  # In production, Nginx reverse proxy will handle this.
    depends_on:
      - backend # Frontend might make API calls to backend
    restart: unless-stopped

  celery_worker:
    build: ./whatsappcrm_backend # Uses the same image as the backend
    container_name: whatsappcrm_celery_worker
    command: celery -A whatsappcrm_backend worker -l INFO
    volumes:
      - ./whatsappcrm_backend:/app
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      - redis
      - db # If tasks interact with the DB
    restart: unless-stopped

  celery_beat:
    build: ./whatsappcrm_backend # Uses the same image as the backend
    container_name: whatsappcrm_celery_beat
    command: celery -A whatsappcrm_backend beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./whatsappcrm_backend:/app
    env_file:
      - ./whatsappcrm_backend/.env
    depends_on:
      - redis
      - db
    restart: unless-stopped

  # Optional: Nginx Reverse Proxy (Recommended for Production)
  # nginx_proxy:
  #   image: nginx:1.25-alpine
  #   container_name: whatsappcrm_nginx_proxy
  #   ports:
  #     - "80:80"
  #     - "443:443" # If handling SSL
  #   volumes:
  #     - ./nginx_proxy/nginx.conf:/etc/nginx/nginx.conf:ro # Your main Nginx config
  #     # Add volumes for SSL certificates if handling SSL here
  #     # - ./nginx_proxy/ssl:/etc/nginx/ssl
  #     # Add volume for frontend static files if Nginx serves them directly
  #     - ./whatsapp-crm-frontend/dist:/var/www/frontend # Example
  #     # Add volume for backend media files if Nginx serves them
  #     - media_volume:/var/www/mediafiles # Example
  #   depends_on:
  #     - frontend
  #     - backend
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  media_volume: # For Django's MEDIA_ROOT, if serving user-uploaded files

# Define a default network (optional, Docker Compose creates one by default)
# networks:
#   crm_network:
#     driver: bridge