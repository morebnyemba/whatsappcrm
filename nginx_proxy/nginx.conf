# Define upstream servers for backend and frontend services
upstream backend_server {
    # Django app (Gunicorn) running in the 'backend' container on its internal port 8000
    server backend:8000;
}

upstream frontend_server {
    # React app (served by Nginx) running in the 'frontend' container on its internal port 80
    server frontend:80;
}

# --- HTTP Server Block: Redirect all HTTP traffic to HTTPS ---
server {
    listen 80;
    # listen [::]:80; # Uncomment if your VPS has IPv6 and you want to listen on it

    # Your domain(s) and IP address
    server_name betblitz.co.zw www.betblitz.co.zw 93.127.139.173;

    # Location for Let's Encrypt ACME challenge files (important for certificate renewal)
    # This path inside the container matches the volume mount from /var/www/letsencrypt on the host
    location /.well-known/acme-challenge/ {
        root /var/www/letsencrypt/;
    }

    # Redirect all other HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# --- HTTPS Server Block ---
server {
    listen 443 ssl http2;
    # listen [::]:443 ssl http2; # Uncomment if your VPS has IPv6

    server_name betblitz.co.zw www.betblitz.co.zw;

    # SSL Certificate paths (inside the Nginx container, using the /etc/nginx/ssl mount from /etc/letsencrypt on host)
    ssl_certificate /etc/nginx/ssl/live/betblitz.co.zw/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/betblitz.co.zw/privkey.pem;

    # Recommended SSL settings (these files should be on the host in /etc/letsencrypt/ and are available via the mount)
    include /etc/nginx/ssl/options-ssl-nginx.conf; # Your custom strong SSL parameters
    ssl_dhparam /etc/nginx/ssl/ssl-dhparams.pem;   # Your generated DH parameters

    # Optional: Add HSTS header (Strict-Transport-Security) after thorough testing of HTTPS
    # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Optional: client_max_body_size if you expect large file uploads through Nginx
    # client_max_body_size 20M;

    # Optional: Gzip compression for text-based assets
    # gzip on;
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss;

    # Location for Let's Encrypt ACME challenge (can also be in HTTPS block for some renewal scenarios or initial setup if HTTP is fully disabled)
    # However, it's usually handled by the HTTP block for standard renewals.
    # location /.well-known/acme-challenge/ {
    #     root /var/www/letsencrypt/;
    # }

    # Serve Django static files
    location /static/ {
        alias /srv/www/static/; # Path inside nginx_proxy container where staticfiles_volume is mounted
        expires 7d;
        add_header Pragma public;
        add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    }

    # Serve Django media files
    location /media/ {
        alias /srv/www/media/; # Path inside nginx_proxy container where media_volume is mounted
        expires 7d;
        add_header Pragma public;
        add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    }

    # Proxy API requests (using /crm-api/ prefix) to the Django backend
    location /crm-api/ {
        proxy_pass http://backend_server; # Django backend expects /crm-api/ directly
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Crucial for Django to know connection is HTTPS
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_buffering off; # Optional: useful for streaming or long-polling if any
    }

    # Proxy Django admin requests
    location /admin/ {
        proxy_pass http://backend_server;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Crucial for Django
        proxy_set_header Host $http_host;
        proxy_redirect off;
    }

    # Proxy all other requests to the React frontend
    location / {
        proxy_pass http://frontend_server;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Crucial for frontend if it needs to know
        proxy_set_header Host $http_host;
        proxy_redirect off;
        # The Nginx instance inside your 'frontend' container should be configured
        # with 'try_files $uri $uri/ /index.html;' to handle SPA routing.
    }

    # Optional: Error and access logs for HTTPS traffic
    # access_log /var/log/nginx/betblitz.co.zw.ssl.access.log;
    # error_log /var/log/nginx/betblitz.co.zw.ssl.error.log;

} # End of HTTPS server block
